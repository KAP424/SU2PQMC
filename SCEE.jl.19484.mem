        - # attractive-U and repulsive-U get the same S_2
        - 
        - 
        - function ctrl_SCEEicr(path::String,model::_Hubbard_Para,indexA::Vector{Int64},indexB::Vector{Int64},Sweeps::Int64,λ::Float64,Nλ::Int64,ss::Vector{Matrix{UInt8}},record)
       48     Ns=model.Ns
        0     ns=div(model.Ns, 2)
        0     NN=length(model.nodes)
     4176     tau = Vector{ComplexF64}(undef, ns)
     2112     global ipiv = Vector{LAPACK.BlasInt}(undef, ns)
     1584     ipivA = Vector{LAPACK.BlasInt}(undef, length(indexA))
     1104     ipivB = Vector{LAPACK.BlasInt}(undef, length(indexB))
        - 
        - 
        0     name = if model.Lattice=="SQUARE" "□" 
        0         elseif model.Lattice=="HoneyComb60" "HC" 
        0         elseif model.Lattice=="HoneyComb120" "HC120" 
        0         else error("Lattice: $(model.Lattice) is not allowed !") end    
     6576     file="$(path)SCEEicr$(name)_t$(model.t)U$(model.U)size$(model.site)Δt$(model.Δt)Θ$(model.Θ)N$(Nλ)BS$(model.BatchSize).csv"
        -     
      720     atexit() do
        0         if record
       48             open(file, "a") do io
        -                 lock(io)
       48                 writedlm(io, O', ',')
        -                 unlock(io)
        -             end
        -         end
     6504         writedlm("$(path)ss/SS$(name)_t$(model.t)U$(model.U)size$(model.site)Δt$(model.Δt)Θ$(model.Θ)λ$(Int(round(Nλ*λ))).csv", [ss[1] ss[2]],",")
        -     end
        -     
  1260037     Gt1= Matrix{ComplexF64}(undef ,model.Ns, model.Ns)
  1260053     Gt2= Matrix{ComplexF64}(undef ,model.Ns, model.Ns)
  1260005     G01= Matrix{ComplexF64}(undef ,model.Ns, model.Ns)
  1260021     G02= Matrix{ComplexF64}(undef ,model.Ns, model.Ns)
  1259973     Gt01= Matrix{ComplexF64}(undef ,model.Ns, model.Ns)
  1260005     Gt02= Matrix{ComplexF64}(undef ,model.Ns, model.Ns)
  1260037     G0t1= Matrix{ComplexF64}(undef ,model.Ns, model.Ns)
  1260053     G0t2= Matrix{ComplexF64}(undef ,model.Ns, model.Ns)
   140277     gmInv_A=Matrix{ComplexF64}(undef ,length(indexA),length(indexA))
    62501     gmInv_B=Matrix{ComplexF64}(undef ,length(indexB),length(indexB))
        -     detg_A=detg_B=0 
        - 
     2832     b_A= Matrix{ComplexF64}(undef ,1,length(indexA))
     2832     tmp1A= Matrix{ComplexF64}(undef ,1,length(indexA))
     2832     tmpA1= Matrix{ComplexF64}(undef ,length(indexA),1)
     2832     a_A= Matrix{ComplexF64}(undef ,length(indexA),1)
        - 
     2016     b_B= Matrix{ComplexF64}(undef ,1,length(indexB))
     2016     tmp1B= Matrix{ComplexF64}(undef ,1,length(indexB))
     2016     tmpB1= Matrix{ComplexF64}(undef ,length(indexB),1)
     2016     a_B= Matrix{ComplexF64}(undef ,length(indexB),1)
        - 
        -     # 预分配临时数组
     8213     global tmpN = Vector{ComplexF64}(undef, Ns)
     8133     tmpN2 = Vector{ComplexF64}(undef, Ns)
  1260021     global tmpNN = Matrix{ComplexF64}(undef, Ns, Ns)
  1260021     global tmpNN2 = Matrix{ComplexF64}(undef, Ns, Ns)
   630277     global tmpNn = Matrix{ComplexF64}(undef, Ns, ns)
   315429     global tmpnn = Matrix{ComplexF64}(undef, ns, ns)
   630293     tmpnN = Matrix{ComplexF64}(undef, ns, Ns)
     8181     tmp1N = Matrix{ComplexF64}(undef ,1, Ns)
   140293     tmpAA = Matrix{ComplexF64}(undef ,length(indexA),length(indexA))
    62501     tmpBB = Matrix{ComplexF64}(undef ,length(indexB),length(indexB))
        - 
        0     rng=MersenneTwister(Threads.threadid()+round(Int,time()*1000))
        -     elements=(1, 2, 3, 4)
      240     samplers_dict = Dict{UInt8, Random.Sampler}()
        0     for excluded in elements
      384         allowed = [i for i in elements if i != excluded]
        0         samplers_dict[excluded] = Random.Sampler(rng, allowed)
        0     end
        - 
        -     tmpO=0
        -     counter=0
      240     O=zeros(Float64,Sweeps+1)
       48     O[1]=λ
        - 
     8197     global II=Diagonal(ones(ComplexF64,model.Ns))
     2784     IA=Diagonal(ones(ComplexF64,length(indexA)))
     1968     IB=Diagonal(ones(ComplexF64,length(indexB)))
        - 
  7558533     BMs1=Array{ComplexF64}(undef,model.Ns,model.Ns,NN-1)  # Number_of_BM*Ns*Ns
  7558533     BMs2=Array{ComplexF64}(undef,model.Ns,model.Ns,NN-1)  # Number_of_BM*Ns*Ns
  7558533     BMsinv1=Array{ComplexF64}(undef,model.Ns,model.Ns,NN-1)  # Number_of_BM*Ns*Ns
  7558533     BMsinv2=Array{ComplexF64}(undef,model.Ns,model.Ns,NN-1)  # Number_of_BM*Ns*Ns
        - 
        0     for idx in 1:NN-1
        0         print("idx=$idx    ")
        0         BM_F!(view(BMs1,:, : , idx),model,ss[1],idx)
        0         BM_F!(view(BMs2,:,:,idx),model,ss[2],idx)
        0         BMinv_F!(view(BMsinv1,:,:,idx),model,ss[1],idx)
        0         BMinv_F!(view(BMsinv2,:,:,idx),model,ss[2],idx)
        -     end
  4409349 
  4409349     BLMs1=Array{ComplexF64}(undef,ns,model.Ns,NN)
        0     BRMs1=Array{ComplexF64}(undef,model.Ns,ns,NN)
        0     view(BLMs1,:,:,NN) .= model.Pt'
        -     view(BRMs1,:,:,1) .= model.Pt
  4409349     
  4409349     BLMs2=Array{ComplexF64}(undef,ns,model.Ns,NN)
        0     BRMs2=Array{ComplexF64}(undef,model.Ns,ns,NN)
        0     view(BLMs2,:,:,NN) .= model.Pt'
        -     view(BRMs2,:,:,1) .= model.Pt
        0 
        0     for i in 1:NN-1
      272         mul!(tmpnN,view(BLMs1,:,:,NN-i+1),view(BMs1,:,:,NN-i))
      576         tmpNn.=tmpnN'
        0         LAPACK.geqrf!(tmpNn, tau)
     2816         LAPACK.orgqr!(tmpNn, tau, ns)
        -         view(BLMs1,:,:,NN-i) .= tmpNn'
     1920         
      576         mul!(tmpNn, view(BMs1,:,:,i), view(BRMs1,:,:,i))
        0         LAPACK.geqrf!(tmpNn, tau)
     2528         LAPACK.orgqr!(tmpNn, tau, ns)
        -         view(BRMs1,:,:,i+1) .= tmpNn
        0         # ---------------------------------------------------------------
      224         mul!(tmpnN,view(BLMs2,:,:,NN-i+1),view(BMs2,:,:,NN-i))
      576         tmpNn.=tmpnN'
        0         LAPACK.geqrf!(tmpNn, tau)
     2816         LAPACK.orgqr!(tmpNn, tau, ns)
        -         view(BLMs2,:,:,NN-i) .= tmpNn'
     2176 
      576         mul!(tmpNn, view(BMs2,:,:,i), view(BRMs2,:,:,i))
        0         LAPACK.geqrf!(tmpNn, tau)
     2528         LAPACK.orgqr!(tmpNn, tau, ns)
        -         view(BRMs2,:,:,i+1) .= tmpNn
        - 
        -         # BLMs2[end-i,:,:]=Matrix(qr( (BLMs2[end-i+1,:,:]*BMs2[end-i+1,:,:])' ).Q)'
        0         # BRMs2[i+1,:,:]=Matrix(qr( BMs2[i,:,:]*BRMs2[i,:,:] ).Q)
        0     end
        -     Θidx=div(NN,2)+1
        - 
        - 
        -     for loop in 1:Sweeps
        -         println("\n ====== Sweep $loop / $Sweeps ======")
        - 
        -         for lt in 1:model.Nt
        -             if  any(model.nodes.==(lt-1)) 
        -                 # println("\n Wrap Time: $lt")
        -                 idx= (lt==1) ? 2 : findfirst(model.nodes .== (lt-1))
        -                 BM_F!(view(BMs1,:,:,idx-1),model,ss[1],idx-1)
        -                 BMinv_F!(view(BMsinv1,:,:,idx-1),model,ss[1],idx-1)
        -                 BM_F!(view(BMs2,:,:,idx-1),model,ss[2],idx-1)
        -                 BMinv_F!(view(BMsinv2,:,:,idx-1),model,ss[2],idx-1)
        -                 for i in idx:max(Θidx,idx)
        -                     # println("update BR i=",i)
        -                     mul!(tmpNn, view(BMs1,:,:,i-1), view(BRMs1,:,:,i-1))
        -                     LAPACK.geqrf!(tmpNn,tau)
        -                     LAPACK.orgqr!(tmpNn, tau, ns)
        -                     view(BRMs1,:,:,i) .= tmpNn
        -                     # ---------------------------------------------------------------
        -                     mul!(tmpNn, view(BMs2,:,:,i-1), view(BRMs2,:,:,i-1))
        -                     LAPACK.geqrf!(tmpNn,tau)
        -                     LAPACK.orgqr!(tmpNn, tau, ns)
        -                     view(BRMs2,:,:,i) .= tmpNn
        -                 end
        - 
        -                 for i in idx:-1:min(Θidx,idx)-1
        -                     # println("update BL i=",i)
        -                     mul!(tmpnN,view(BLMs1,:,:,i+1),view(BMs1,:,:,i))
        -                     tmpNn.=tmpnN'
        -                     LAPACK.geqrf!(tmpNn,tau)
        -                     LAPACK.orgqr!(tmpNn, tau, ns)
        -                     view(BLMs1,:,:,i) .= tmpNn'
        -                     # ---------------------------------------------------------------
        -                     mul!(tmpnN,view(BLMs2,:,:,i+1),view(BMs2,:,:,i))
        0                     tmpNn.=tmpnN'
      816                     LAPACK.geqrf!(tmpNn,tau)
        -                     LAPACK.orgqr!(tmpNn, tau, ns)
        -                     view(BLMs2,:,:,i) .= tmpNn'
        -                 end
        -                 idx=findfirst(model.nodes .== (lt-1))
        -                 G4!(Gt1,G01,Gt01,G0t1,model.nodes,idx,BLMs1,BRMs1,BMs1,BMsinv1)
        -                 G4!(Gt2,G02,Gt02,G0t2,model.nodes,idx,BLMs2,BRMs2,BMs2,BMsinv2)
        -                 GroverMatrix!(gmInv_A,view(G01,indexA,indexA),view(G02,indexA,indexA))
        -                 detg_A=abs2(det(gmInv_A))
        -                 LAPACK.getrf!(gmInv_A,ipivA)
        -                 LAPACK.getri!(gmInv_A, ipivA)
        -                 GroverMatrix!(gmInv_B,view(G01,indexB,indexB),view(G02,indexB,indexB))
        -                 detg_B=abs2(det(gmInv_B))
        -                 LAPACK.getrf!(gmInv_B,ipivB)
        -                 LAPACK.getri!(gmInv_B, ipivB)
        -                 # #####################################################################
        -                 # GM_A_=GroverMatrix_old(view(G01,indexA,indexA),view(G02,indexA,indexA))
        -                 # GM_B_=GroverMatrix_old(view(G01,indexB,indexB),view(G02,indexB,indexB))
        -                 # GM_A_=inv(GM_A_)
        -                 # GM_B_=inv(GM_B_)
        -                 # if norm(gmInv_A-GM_A_)+norm(gmInv_B-GM_B_)>1e-8
        0                 #     println(norm(gmInv_A-GM_A_)," ",norm(gmInv_B-GM_B_))
    17280                 #     error("WrapTime=$lt GM_A wrong!")
        -                 # end
     1440                 # #####################################################################
        0             end
        0             @inbounds @simd for iii in 1:Ns
        0                 @fastmath tmpN[iii] = cis( model.α *model.η[ss[1][iii, lt]] ) 
        0                 @fastmath tmpN2[iii] = cis( model.α *model.η[ss[2][iii, lt]] ) 
        0             end
        -             mul!(tmpNN, model.eK, Gt1)
     4096             mul!(Gt1,tmpNN,model.eKinv)
     1056             mul!(tmpNN,Diagonal(tmpN),Gt1)
        0             conj!(tmpN)
     4688             mul!(Gt1,tmpNN,Diagonal(tmpN))
        - 
     4096             mul!(tmpNN, model.eK, Gt2)
     1056             mul!(Gt2,tmpNN,model.eKinv)
        0             mul!(tmpNN,Diagonal(tmpN2),Gt2)
     4688             conj!(tmpN2)
        0             mul!(Gt2,tmpNN,Diagonal(tmpN2))
        - 
        0             if lt==div(model.Nt,2)+1
        -                 mul!(tmpNN, model.eKinv, Diagonal(tmpN))
        0                 tmpNN2 .= G01
      672                 for i in diagind(tmpNN2)
     1440                     tmpNN2[i] -= 1
        0                 end
     7136                 mul!(G0t1, tmpNN2 ,tmpNN)
        -                 conj!(tmpN)
        0                 mul!(tmpNN, model.eK, G01)
      656                 mul!(Gt01,Diagonal(tmpN),tmpNN)
     1440                 
        0                 mul!(tmpNN, model.eKinv, Diagonal(tmpN2))
     7008                 tmpNN2 .= G02
        0                 for i in diagind(tmpNN2)
     1728                     tmpNN2[i] -= 1
        0                 end
        0                 mul!(G0t2, tmpNN2 ,tmpNN)
        0                 conj!(tmpN2)
        -                 mul!(tmpNN, model.eK, G02)
        0                 mul!(Gt02,Diagonal(tmpN2),tmpNN)
        0 
        0                 # Gt01=diagm(exp.(1im*model.α.*D1))*model.eK*G01
        0                 # Gt02=diagm(exp.(1im*model.α.*D2))*model.eK*G02
        0                 # G0t1=-(II-G01)*model.eKinv*diagm(exp.(-1im*model.α.*D1))
        0                 # G0t2=-(II-G02)*model.eKinv*diagm(exp.(-1im*model.α.*D2))
        0             else
        -                 mul!(tmpNN, G0t1, model.eKinv)
        -                 mul!(G0t1, tmpNN , Diagonal(tmpN))
        -                 conj!(tmpN)
        -                 mul!(tmpNN, model.eK, Gt01)
        -                 mul!(Gt01,Diagonal(tmpN),tmpNN)
        - 
        -                 mul!(tmpNN, G0t2, model.eKinv)
        -                 mul!(G0t2, tmpNN , Diagonal(tmpN2))
        -                 conj!(tmpN2)
        -                 mul!(tmpNN, model.eK, Gt02)
        -                 mul!(Gt02,Diagonal(tmpN2),tmpNN)
   933696                 # G0t1=G0t1*model.eKinv*diagm(exp.(-1im*model.α.*D1))
        -                 # G0t2=G0t2*model.eKinv*diagm(exp.(-1im*model.α.*D2))
        -                 # Gt01=diagm(exp.(1im*model.α.*D1))*model.eK*Gt01
        -                 # Gt02=diagm(exp.(1im*model.α.*D2))*model.eK*Gt02
        0             end
        0 
     2880             #####################################################################
        0             # Gt1_,G01_,Gt01_,G0t1_=G4_old(model,ss[1],lt,div(model.Nt,2))
     2880             # Gt2_,G02_,Gt02_,G0t2_=G4_old(model,ss[2],lt,div(model.Nt,2))
        -                 
        0             # if norm(Gt1-Gt1_)+norm(Gt2-Gt2_)+norm(Gt01-Gt01_)+norm(Gt02-Gt02_)+norm(G0t1-G0t1_)+norm(G0t2-G0t2_)>1e-3
        0             #     println( norm(Gt1-Gt1_),'\n',norm(Gt2-Gt2_),'\n',norm(Gt01-Gt01_),'\n',norm(Gt02-Gt02_),'\n',norm(G0t1-G0t1_),'\n',norm(G0t2-G0t2_) )
     2832             #     error("WrapTime=$lt ")
        0             # end
     2864             #####################################################################
        - 
        0 
       48             for x in 1:model.Ns
        0                 # @views tmpAA .= 2* G02[indexA,indexA] .- IA
    15360                 tmpAA .= view(G02,indexA,indexA)
    31104                 lmul!(2.0, tmpAA)
    15456                 axpy!(-1.0, IA, tmpAA)
        0                 b_A .= view(Gt01,x:x,indexA)
        0                 mul!(tmp1A, b_A, tmpAA)
        0                 mul!(b_A, tmp1A, gmInv_A)
       48                 a_A .= view(G0t1,indexA,x)
        -                 Tau_A=(b_A*a_A)[1,1]
        0 
        0                 # @views tmpBB .= 2*G02[indexB,indexB] .- IB
    15360                 tmpBB .= view(G02,indexB,indexB)
    31104                 lmul!(2.0, tmpBB)
    15456                 axpy!(-1.0, IB, tmpBB) 
        0                 b_B .= view(Gt01,x:x,indexB)
        0                 mul!(tmp1B, b_B, tmpBB)
        0                 mul!(b_B, tmp1B, gmInv_B)
       32                 a_B .= view(G0t1,indexB,x)
        -                 Tau_B=(b_B*a_B)[1,1]
        - 
        -                 # b_A=transpose(Gt01[x,view(A,:)]) *(2*G02[view(A,:),view(A,:)]-IA)*gmInv_A
        -                 # a_A=G0t1[view(A,:),x]
        -                 # Tau_A=b_A*a_A
        -                 # b_B=transpose(Gt01[x,view(B,:)]) *(2*G02[view(B,:),view(B,:)]-IB)*gmInv_B
        0                 # a_B=G0t1[view(B,:),x]
     2832                 # Tau_B=b_B*a_B
        0                 
        0                 sx1=rand(rng,samplers_dict[ss[1][x,lt]])
     2832                 
        -                 @fastmath Δ1=cis(model.α*(model.η[sx1]-model.η[ss[1][x,lt]]))-1
        0                 @fastmath r1=1+Δ1*(1-Gt1[x,x])
     2816 
        0                 @fastmath p=model.γ[sx1]/model.γ[ss[1][x,lt]]*abs2(r1+Δ1*Tau_A)^λ*abs2(r1+Δ1*Tau_B)^(1-λ)
        0                 
     2816                 if rand(rng)<p
        -                     rho_A=Δ1/(r1+Tau_A*Δ1)
        -                     detg_A*=abs2(1+Δ1/r1*Tau_A)
        -                     rho_B=Δ1/(r1+Tau_B*Δ1)
        -                     detg_B*=abs2(1+Δ1/r1*Tau_B)
        - 
        -                     mul!(tmpA1, gmInv_A,a_A )
        -                     mul!(tmpAA, tmpA1, b_A)
        -                     axpy!(-rho_A, tmpAA, gmInv_A)
        -                     mul!(tmpB1, gmInv_B,a_B )
        -                     mul!(tmpBB, tmpB1, b_B)
        -                     axpy!(-rho_B, tmpBB, gmInv_B)
        -                     # gmInv_A-=rho_A* ( gmInv_A*a_A .* b_A)
        -                     # gmInv_B-=rho_B* ( gmInv_B*a_B .* b_B)
        - 
        -                     mul!(tmpNN, view(G0t1,:,x),view(Gt01,x:x,:))
        -                     axpy!(Δ1/r1, tmpNN, G01)
        -                     mul!(tmpNN, view(Gt1,:,x),view(Gt01,x:x,:))
        0                     axpy!(Δ1/r1, tmpNN, Gt01)
        -                     tmp1N[1, :] .= -view(Gt1,x, :)
        0                     tmp1N[1, x] += 1
        0                     mul!(tmpNN, view(G0t1,:,x),tmp1N)
        0                     axpy!(-Δ1/r1, tmpNN, G0t1)
        0                     mul!(tmpNN, view(Gt1,:,x),tmp1N)
        0                     axpy!(-Δ1/r1, tmpNN, Gt1)
        0 
        0                     ss[1][x,lt]=sx1
  2799360                     # G01+=Δ1/r1* (G0t1[:,x] .* transpose(Gt01[x,:]))
        -                     # Gt01+=Δ1/r1* (Gt1[:,x] .* transpose(Gt01[x,:]))
        -                     # G0t1-=Δ1/r1* (G0t1[:,x] .* transpose( (II-Gt1)[x,:] ) )
        0                     # Gt1-=Δ1/r1* (Gt1[:,x] .* transpose( (II-Gt1)[x,:]) )         
        0                     #####################################################################
        0                     # print('-')
        0                     # Gt1_,G01_,Gt01_,G0t1_=G4_old(model,ss[1],lt,div(model.Nt,2))
        0                     # GM_A_=GroverMatrix(G01_[indexA,indexA],G02[indexA,indexA])
        0                     # gmInv_A_=inv(GM_A_)
        0                     # GM_B_=GroverMatrix(G01_[indexB,indexB],G02[indexB,indexB])
  2799360                     # gmInv_B_=inv(GM_B_)
        -                     # detg_A_=abs2(det(GM_A_))
        -                     # detg_B_=abs2(det(GM_B_))
        -                     # if norm(Gt1-Gt1_)+norm(G01-G01_)+norm(Gt01-Gt01_)+norm(G0t1-G0t1_)+
        -                     #    norm(gmInv_A_-gmInv_A)+norm(gmInv_B-gmInv_B_)+abs(detg_A-detg_A_)+abs(detg_B-detg_B_)>1e-3
        -                     #     println('\n',norm(Gt1-Gt1_),'\n',norm(G01-G01_),'\n',norm(Gt01-Gt01_),'\n',norm(G0t1-G0t1_))
        -                     #     println(norm(gmInv_A_-gmInv_A),' ',norm(gmInv_B-gmInv_B_),"\n",abs(detg_A-detg_A_),' ',abs(detg_B-detg_B_))
        -                     #     error("$lt  $x:,,,asdasdasd")
        -                     # end
        0                     #####################################################################
        -                 end
  4198960 
  2799328 
        -                 tmp1A .= view(Gt02,x:x,indexA)
 10264016                 mul!(b_A, tmp1A, gmInv_A)
        -                 # @views tmpAA .= 2*G01[indexA,indexA] .- IA
   466544                 tmpAA .= view(G01,indexA,indexA)
  1996800                 lmul!(2.0, tmpAA)
  2496000                 axpy!(-1.0, IA, tmpAA) 
  1996800                 mul!(a_A, tmpAA, view(G0t2,indexA,x))
  2496032                 Tau_A=(b_A*a_A)[1,1]
        - 
        0 
        0                 tmp1B .= view(Gt02,x:x,indexB)
   499232                 mul!(b_B, tmp1B, gmInv_B)
        0                 # @views tmpBB .= 2*G01[indexB,indexB] .- IB
        0                 tmpBB .= view(G01,indexB,indexB)
   499232                 lmul!(2.0, tmpBB)
        -                 axpy!(-1.0, IB, tmpBB)
        -                 mul!(a_B, tmpBB, view(G0t2,indexB,x))
        -                 Tau_B=(b_B*a_B)[1,1]
  1747200 
   499232                 # b_A=transpose(Gt02[x,view(A,:)]) *gmInv_A
  1746864                 # a_A=(2*G01[view(A,:),view(A,:)]-IA)*G0t2[view(A,:),x]
   499232                 # b_B=transpose(Gt02[x,view(B,:)]) *gmInv_B
        0                 # a_B=(2*G01[view(B,:),view(B,:)]-IB)*G0t2[view(B,:),x]
        0                 # Tau_B=b_B*a_B
   748800 
   998464                 sx2=rand(rng,samplers_dict[ss[2][x,lt]])
   748656 
   998464                 @fastmath Δ2=cis(model.α*(model.η[sx2]-model.η[ss[2][x,lt]]))-1
        -                 @fastmath r2=(1+Δ2*(1-Gt2[x,x]))
        0                 @fastmath p=model.γ[sx2]/model.γ[ss[2][x,lt]]*abs2(r2+Δ2*Tau_A)^λ*abs2(r2+Δ2*Tau_B)^(1-λ)
        - 
        -                 if rand(rng)<p
        -                     rho_A=Δ2/(r2+Tau_A*Δ2)
        -                     detg_A*=abs2(1+Δ2/r2*Tau_A)
        -                     rho_B=Δ2/(r2+Tau_B*Δ2)
        -                     detg_B*=abs2(1+Δ2/r2*Tau_B)
        - 
        -                     mul!(tmpA1, gmInv_A,a_A )
        -                     mul!(tmpAA, tmpA1, b_A)
        -                     axpy!(-rho_A, tmpAA, gmInv_A)
        -                     mul!(tmpB1, gmInv_B,a_B )
        -                     mul!(tmpBB, tmpB1, b_B)
        -                     axpy!(-rho_B, tmpBB, gmInv_B)
        -                     # gmInv_A-=rho_A* ( gmInv_A*a_A .* b_A)
        -                     # gmInv_B-=rho_B* ( gmInv_B*a_B .* b_B)
        - 
        -                     mul!(tmpNN, view(G0t2,:,x),view(Gt02,x:x,:))
        -                     axpy!(Δ2/r2, tmpNN, G02)
        -                     mul!(tmpNN, view(Gt2,:,x),view(Gt02,x:x,:))
        -                     axpy!(Δ2/r2, tmpNN, Gt02)
        -                     tmp1N[1, :] .= -view(Gt2,x, :)
        -                     tmp1N[1, x] += 1
        -                     mul!(tmpNN, view(G0t2,:,x),tmp1N)
        0                     axpy!(-Δ2/r2, tmpNN, G0t2)
        0                     mul!(tmpNN, view(Gt2,:,x),tmp1N)
        -                     axpy!(-Δ2/r2, tmpNN, Gt2)
        0                     ss[2][x,lt]=sx2
        0                     # G02+=Δ2/r2* (G0t2[:,x] .* transpose( Gt02[x,:]))
        0                     # Gt02+=Δ2/r2* (Gt2[:,x] .* transpose( Gt02[x,:]))
        0                     # G0t2-=Δ2/r2* (G0t2[:,x] .* transpose( (II-Gt2)[x,:]))
  2799360                     # Gt2-=Δ2/r2* (Gt2[:,x] .* transpose( (II-Gt2)[x,:])   )      
        -                     # #####################################################################
        -                     # print('*')
        0                     # Gt2_,G02_,Gt02_,G0t2_=G4_old(model,ss[2],lt,div(model.Nt,2))
        0                     # GM_A_=GroverMatrix(G01[indexA,indexA],G02_[indexA,indexA])
        -                     # gmInv_A_=inv(GM_A_)
        0                     # GM_B_=GroverMatrix(G01[indexB,indexB],G02_[indexB,indexB])
        0                     # gmInv_B_=inv(GM_B_)
        0                     # detg_A_=abs2(det(GM_A_))
        0                     # detg_B_=abs2(det(GM_B_))
  2799360 
        -                     # if norm(Gt2-Gt2_)+norm(G02-G02_)+norm(Gt02-Gt02_)+norm(G0t2-G0t2_)+
        -                     #    norm(gmInv_A_-gmInv_A)+norm(gmInv_B-gmInv_B_)+abs(detg_A-detg_A_)+abs(detg_B-detg_B_)>1e-3
        -                     #     println('\n',norm(Gt2-Gt2_),'\n',norm(G02-G02_),'\n',norm(Gt02-Gt02_),'\n',norm(G0t2-G0t2_))
        -                     #     error("$lt  $x:,,,asdasdasd")
        -                     # end
        -                     #####################################################################
        -                 end
        0 
        -             end
  4198960 
  2799232             ##------------------------------------------------------------------------
 10263984 
        -             tmpO+=(detg_A/detg_B)^(1/Nλ)
   466544             counter+=1
  2167936             ##------------------------------------------------------------------------
  2709952         end
  2167968 
  2710048         G4!(Gt1,G01,Gt01,G0t1,model.nodes,NN,BLMs1,BRMs1,BMs1,BMsinv1)
        -         G4!(Gt2,G02,Gt02,G0t2,model.nodes,NN,BLMs2,BRMs2,BMs2,BMsinv2)
        0         GroverMatrix!(gmInv_A,G01[indexA,indexA],G02[indexA,indexA])
        0         detg_A=abs2(det(gmInv_A))
   542016         LAPACK.getrf!(gmInv_A,ipivA)
        0         LAPACK.getri!(gmInv_A, ipivA)
        0         GroverMatrix!(gmInv_B,G01[indexB,indexB],G02[indexB,indexB])
   542016         detg_B=abs2(det(gmInv_B))
        -         LAPACK.getrf!(gmInv_B,ipivB)
        -         LAPACK.getri!(gmInv_B, ipivB)
        - 
  1896608         # println("\n ----------------reverse update ----------------")
   542016 
  1896832         for lt in model.Nt:-1:1
   542016             if  any(model.nodes.==lt) 
        0                 idx= (lt==model.nodes[end]) ? NN : findfirst(model.nodes .== lt)+1
        0                 # println("\n Wrap Time: $lt")
   812832                 BM_F!(view(BMs1,:,:,idx-1),model,ss[1],idx-1)
  1084032                 BM_F!(view(BMs2,:,:,idx-1),model,ss[2],idx-1)
   812832                 BMinv_F!(view(BMsinv1,:,:,idx-1),model,ss[1],idx-1)
  1084032                 BMinv_F!(view(BMsinv2,:,:,idx-1),model,ss[2],idx-1)
        0 
        -                 for i in idx-1:-1:min(Θidx,idx)-1
        -                     # println("update BL i=",i)
        -                     mul!(tmpnN,view(BLMs1,:,:,i+1),view(BMs1,:,:,i))
        -                     tmpNn.=tmpnN'
        -                     LAPACK.geqrf!(tmpNn,tau)
        -                     LAPACK.orgqr!(tmpNn, tau, ns)
        -                     view(BLMs1,:,:,i) .= tmpNn'
        - 
        -                     mul!(tmpnN,view(BLMs2,:,:,i+1),view(BMs2,:,:,i))
        -                     tmpNn.=tmpnN'
        -                     LAPACK.geqrf!(tmpNn,tau)
        -                     LAPACK.orgqr!(tmpNn, tau, ns)
        -                     view(BLMs2,:,:,i) .= tmpNn'
        -                     # view(BLMs1,:,:i) .=BLMs1[i+1,:,:]*BMs1[i,:,:]
        -                     # BLMs1[i,:,:]=Matrix(qr(BLMs1[i,:,:]').Q)'
        -                     # BLMs2[i,:,:]=BLMs2[i+1,:,:]*BMs2[i,:,:]
        -                     # BLMs2[i,:,:]=Matrix(qr(BLMs2[i,:,:]').Q)'
        -                 end
        -                 for i in idx:max(Θidx,idx)
        -                     # println("update BR i=",i)
        -                     mul!(tmpNn, view(BMs1,:,:,i-1), view(BRMs1,:,:,i-1))
        -                     LAPACK.geqrf!(tmpNn,tau)
        0                     LAPACK.orgqr!(tmpNn, tau, ns)
        -                     view(BRMs1,:,:,i) .= tmpNn
        - 
        -                     mul!(tmpNn, view(BMs2,:,:,i-1), view(BRMs2,:,:,i-1))
    11456                     LAPACK.geqrf!(tmpNn,tau)
        0                     LAPACK.orgqr!(tmpNn, tau, ns)
        -                     view(BRMs2,:,:,i) .= tmpNn
        0                     # BRMs1[i,:,:]=BMs1[i-1,:,:]*BRMs1[i-1,:,:]
        -                     # BRMs2[i,:,:]=BMs2[i-1,:,:]*BRMs2[i-1,:,:]
        0                     # BRMs1[i,:,:]=Matrix(qr(BRMs1[i,:,:]).Q)
        0                     # BRMs2[i,:,:]=Matrix(qr(BRMs2[i,:,:]).Q)
        0                 end
        0                 idx=findfirst(model.nodes .== lt)
        0                 G4!(Gt1,G01,Gt01,G0t1,model.nodes,idx,BLMs1,BRMs1,BMs1,BMsinv1)
        0                 G4!(Gt2,G02,Gt02,G0t2,model.nodes,idx,BLMs2,BRMs2,BMs2,BMsinv2)
        0                 GroverMatrix!(gmInv_A,view(G01,indexA,indexA),view(G02,indexA,indexA))
        0                 detg_A=abs2(det(gmInv_A))
        0                 LAPACK.getrf!(gmInv_A,ipivA)
        0                 LAPACK.getri!(gmInv_A, ipivA)
        -                 GroverMatrix!(gmInv_B,view(G01,indexB,indexB),view(G02,indexB,indexB))
        -                 detg_B=abs2(det(gmInv_B))
        -                 LAPACK.getrf!(gmInv_B,ipivB)
       96                 LAPACK.getri!(gmInv_B, ipivB)
    17280 
     1440                 #####################################################################
        -                 # println("--------Test BMs and BMinvs--------")
        0                 # BMs=zeros(ComplexF64,NN-1,model.Ns,model.Ns)  # Number_of_BM*Ns*Ns
        0                 # BMinvs=zeros(ComplexF64,NN-1,model.Ns,model.Ns)  # Number_of_BM*Ns*Ns
        0 
        0                 # for idxx in axes(BMs,1)
        -                 #     BMs[:,:,idxx]=BM_F(model,ss[1],idxx)
        0                 #     BMinvs[:,:,idxx]=BMinv_F(model,ss[1],idxx)
        -                 #     println(norm(BMs[:,:,idxx]-BMs1[:,:,idxx]),",",norm(BMinvs[:,:,idxx]-BMsinv1[:,:,idxx]))
        0                 # end
      704                 # println("--------Test BLMs and BRMs --------")
     1440                 # BLMs=zeros(ComplexF64,NN,ns,model.Ns)
        0                 # BRMs=zeros(ComplexF64,NN,model.Ns,ns)
     7136                 # BLMs[end,:,:]=model.Pt'[:,:]
        -                 # BRMs[1,:,:]=model.Pt[:,:]
        0                 # for i in axes(BMs,1)
      704                 #     BLMs[end-i,:,:]=Matrix(qr( (BLMs[end-i+1,:,:]*BMs[end-i+1,:,:])' ).Q)'
     1440                 #     BRMs[i+1,:,:]=Matrix(qr( BMs[i,:,:]*BRMs[i,:,:] ).Q)
        0                 #     println(norm(BLMs1[end-i,:,:]-BLMs[end-i,:,:]),",",norm(BRMs1[i+1,:,:]-BRMs[i+1,:,:]))
     6944                 # end
        -                 #####################################################################
        - 
        -             else
        -                 @inbounds @simd for iii in 1:Ns
        0                     @fastmath tmpN[iii] = cis( model.α *model.η[ss[1][iii, lt+1]] ) 
        0                     @fastmath tmpN2[iii] = cis( model.α *model.η[ss[2][iii, lt+1]] ) 
        -                 end
     2560                 mul!(tmpNN,Gt1,Diagonal(tmpN))
      672                 conj!(tmpN)
        0                 mul!(Gt1,Diagonal(tmpN),tmpNN)
     2960                 mul!(tmpNN,model.eKinv,Gt1)
        -                 mul!(Gt1,tmpNN,model.eK)
     2176 
      672                 mul!(tmpNN,Gt2,Diagonal(tmpN2))
        0                 conj!(tmpN2)
     2960                 mul!(Gt2,Diagonal(tmpN2),tmpNN)
        -                 mul!(tmpNN,model.eKinv,Gt2)
        -                 mul!(Gt2,tmpNN,model.eK)
        - 
        -                 # D1=[model.η[x] for x in ss[1][:,lt+1]]
        0                 # D2=[model.η[x] for x in ss[2][:,lt+1]]
     1728                 # Gt1=model.eKinv*diagm(exp.(-1im*model.α.*D1)) *Gt1* diagm(exp.(1im*model.α.*D1))*model.eK 
        0                 # Gt2=model.eKinv*diagm(exp.(-1im*model.α.*D2)) *Gt2* diagm(exp.(1im*model.α.*D2))*model.eK
        0                 
        0                 # if lt==div(model.Nt,2)+1
        0                 #     Gt01=model.eKinv*diagm(exp.(-1im*model.α.*D1))*G01
        0                 #     Gt02=model.eKinv*diagm(exp.(-1im*model.α.*D2))*G02
        0                 #     G0t1=-(II-G01)*diagm(exp.(1im*model.α.*D1))*model.eK
        0                 #     G0t2=-(II-G02)*diagm(exp.(1im*model.α.*D2))*model.eK
        0                 # else
        0                 mul!(tmpNN,Diagonal(tmpN),Gt01)
        0                 conj!(tmpN)
        -                 mul!(Gt01,model.eKinv,tmpNN)
        -                 mul!(tmpNN,G0t1,Diagonal(tmpN))
        -                 mul!(G0t1,tmpNN,model.eK)
        - 
        -                 mul!(tmpNN,Diagonal(tmpN2),Gt02)
        -                 conj!(tmpN2)
        -                 mul!(Gt02,model.eKinv,tmpNN)
        -                 mul!(tmpNN,G0t2,Diagonal(tmpN2))
        -                 mul!(G0t2,tmpNN,model.eK)
        - 
        -                 # G0t1=G0t1*diagm(exp.(1im*model.α.*D1))*model.eK
        -                 # G0t2=G0t2*diagm(exp.(1im*model.α.*D2))*model.eK
        -                 # Gt01=model.eKinv*diagm(exp.(-1im*model.α.*D1))*Gt01
        -                 # Gt02=model.eKinv*diagm(exp.(-1im*model.α.*D2))*Gt02
        -             end
        -             #####################################################################
        -             # Gt1_,G01_,Gt01_,G0t1_=G4_old(model,ss[1],lt,div(model.Nt,2))
        -             # Gt2_,G02_,Gt02_,G0t2_=G4_old(model,ss[2],lt,div(model.Nt,2))
        -             # if norm(Gt1-Gt1_)+norm(Gt2-Gt2_)+norm(Gt01-Gt01_)+norm(Gt02-Gt02_)+norm(G0t1-G0t1_)+norm(G0t2-G0t2_)>1e-3
        -             #     println( norm(Gt1-Gt1_),'\n',norm(Gt2-Gt2_),'\n',norm(Gt01-Gt01_),'\n',norm(Gt02-Gt02_),'\n',norm(G0t1-G0t1_),'\n',norm(G0t2-G0t2_) )
        -             #     error("WrapTime=$lt ")
        -             # end
        -             #####################################################################
        -             
   839808             for x in 1:model.Ns
        -                 # @views tmpAA .= 2* G02[indexA,indexA] .- IA
        -                 tmpAA .= view(G02,indexA,indexA)
        -                 lmul!(2.0, tmpAA)
     2592                 axpy!(-1.0, IA, tmpAA)
        0                 b_A .= view(Gt01,x:x,indexA)
     2592                 mul!(tmp1A, b_A, tmpAA)
        0                 mul!(b_A, tmp1A, gmInv_A)
        0                 a_A .= view(G0t1,indexA,x)
        -                 Tau_A=(b_A*a_A)[1,1]
     2576 
        0                 # @views tmpBB .= 2*G02[indexB,indexB] .- IB
     2576                 tmpBB .= view(G02,indexB,indexB)
        0                 lmul!(2.0, tmpBB)
        0                 axpy!(-1.0, IB, tmpBB) 
        -                 b_B .= view(Gt01,x:x,indexB)
        -                 mul!(tmp1B, b_B, tmpBB)
        -                 mul!(b_B, tmp1B, gmInv_B)
        -                 a_B .= view(G0t1,indexB,x)
        -                 Tau_B=(b_B*a_B)[1,1]
        - 
        -                 # b_A=transpose(Gt01[x,view(A,:)]) *(2*G02[view(A,:),view(A,:)]-IA)*gmInv_A
        -                 # a_A=G0t1[view(A,:),x]
        -                 # Tau_A=b_A*a_A
        -                 # b_B=transpose(Gt01[x,view(B,:)]) *(2*G02[view(B,:),view(B,:)]-IB)*gmInv_B
        -                 # a_B=G0t1[view(B,:),x]
        -                 # Tau_B=b_B*a_B
     2592                 
        0                 sx1=rand(rng,samplers_dict[ss[1][x,lt]])
        0                 
     2592                 @fastmath Δ1=cis(model.α*(model.η[sx1]-model.η[ss[1][x,lt]]))-1
        0                 @fastmath r1=1+Δ1*(1-Gt1[x,x])
        - 
     2544                 @fastmath p=model.γ[sx1]/model.γ[ss[1][x,lt]]*abs2(r1+Δ1*Tau_A)^λ*abs2(r1+Δ1*Tau_B)^(1-λ)
        0                 
        0                 if rand(rng)<p
     2576                     rho_A=Δ1/(r1+Tau_A*Δ1)
        0                     detg_A*=abs2(1+Δ1/r1*Tau_A)
        -                     rho_B=Δ1/(r1+Tau_B*Δ1)
        -                     detg_B*=abs2(1+Δ1/r1*Tau_B)
        - 
        -                     mul!(tmpA1, gmInv_A,a_A )
        -                     mul!(tmpAA, tmpA1, b_A)
        -                     axpy!(-rho_A, tmpAA, gmInv_A)
        -                     mul!(tmpB1, gmInv_B,a_B )
        -                     mul!(tmpBB, tmpB1, b_B)
        -                     axpy!(-rho_B, tmpBB, gmInv_B)
        -                     # gmInv_A-=rho_A* ( gmInv_A*a_A .* b_A)
        -                     # gmInv_B-=rho_B* ( gmInv_B*a_B .* b_B)
        - 
        -                     mul!(tmpNN, view(G0t1,:,x),view(Gt01,x:x,:))
        -                     axpy!(Δ1/r1, tmpNN, G01)
        -                     mul!(tmpNN, view(Gt1,:,x),view(Gt01,x:x,:))
      576                     axpy!(Δ1/r1, tmpNN, Gt01)
        -                     tmp1N[1, :] .= -view(Gt1,x, :)
        0                     tmp1N[1, x] += 1
        0                     mul!(tmpNN, view(G0t1,:,x),tmp1N)
        0                     axpy!(-Δ1/r1, tmpNN, G0t1)
        0                     mul!(tmpNN, view(Gt1,:,x),tmp1N)
        0                     axpy!(-Δ1/r1, tmpNN, Gt1)
        0 
        0                     ss[1][x,lt]=sx1
  2799360                     # G01+=Δ1/r1* (G0t1[:,x] .* transpose(Gt01[x,:]))
        -                     # Gt01+=Δ1/r1* (Gt1[:,x] .* transpose(Gt01[x,:]))
        -                     # G0t1-=Δ1/r1* (G0t1[:,x] .* transpose( (II-Gt1)[x,:] ) )
        0                     # Gt1-=Δ1/r1* (Gt1[:,x] .* transpose( (II-Gt1)[x,:]) )         
        0                     #####################################################################
        0                     # print('-')
        0                     # Gt1_,G01_,Gt01_,G0t1_=G4_old(model,ss[1],lt,div(model.Nt,2))
        0                     # GM_A_=GroverMatrix(G01_[indexA,indexA],G02[indexA,indexA])
        0                     # gmInv_A_=inv(GM_A_)
        0                     # GM_B_=GroverMatrix(G01_[indexB,indexB],G02[indexB,indexB])
  2799360                     # gmInv_B_=inv(GM_B_)
        -                     # detg_A_=abs2(det(GM_A_))
        -                     # detg_B_=abs2(det(GM_B_))
        -                     # if norm(Gt1-Gt1_)+norm(G01-G01_)+norm(Gt01-Gt01_)+norm(G0t1-G0t1_)+
        -                     #    norm(gmInv_A_-gmInv_A)+norm(gmInv_B-gmInv_B_)+abs(detg_A-detg_A_)+abs(detg_B-detg_B_)>1e-3
        -                     #     println('\n',norm(Gt1-Gt1_),'\n',norm(G01-G01_),'\n',norm(Gt01-Gt01_),'\n',norm(G0t1-G0t1_))
        -                     #     println(norm(gmInv_A_-gmInv_A),' ',norm(gmInv_B-gmInv_B_),"\n",abs(detg_A-detg_A_),' ',abs(detg_B-detg_B_))
        -                     #     error("$lt  $x:,,,asdasdasd")
        -                     # end
        0                     #####################################################################
        -                 end
  4198912 
  2799232 
        -                 tmp1A .= view(Gt02,x:x,indexA)
 10264032                 mul!(b_A, tmp1A, gmInv_A)
        -                 # @views tmpAA .= 2*G01[indexA,indexA] .- IA
   466544                 tmpAA .= view(G01,indexA,indexA)
  2268544                 lmul!(2.0, tmpAA)
  2835712                 axpy!(-1.0, IA, tmpAA) 
  2268640                 mul!(a_A, tmpAA, view(G0t2,indexA,x))
  2835808                 Tau_A=(b_A*a_A)[1,1]
        - 
        0 
        0                 tmp1B .= view(Gt02,x:x,indexB)
   567168                 mul!(b_B, tmp1B, gmInv_B)
        0                 # @views tmpBB .= 2*G01[indexB,indexB] .- IB
        0                 tmpBB .= view(G01,indexB,indexB)
   567168                 lmul!(2.0, tmpBB)
        -                 axpy!(-1.0, IB, tmpBB)
        -                 mul!(a_B, tmpBB, view(G0t2,indexB,x))
        -                 Tau_B=(b_B*a_B)[1,1]
  1984640 
   567168                 # b_A=transpose(Gt02[x,view(A,:)]) *gmInv_A
  1984976                 # a_A=(2*G01[view(A,:),view(A,:)]-IA)*G0t2[view(A,:),x]
   567168                 # b_B=transpose(Gt02[x,view(B,:)]) *gmInv_B
        0                 # a_B=(2*G01[view(B,:),view(B,:)]-IB)*G0t2[view(B,:),x]
        0                 # Tau_B=b_B*a_B
   850560 
  1134336                 sx2=rand(rng,samplers_dict[ss[2][x,lt]])
   850560 
  1134336                 @fastmath Δ2=cis(model.α*(model.η[sx2]-model.η[ss[2][x,lt]]))-1
        -                 @fastmath r2=(1+Δ2*(1-Gt2[x,x]))
        0                 @fastmath p=model.γ[sx2]/model.γ[ss[2][x,lt]]*abs2(r2+Δ2*Tau_A)^λ*abs2(r2+Δ2*Tau_B)^(1-λ)
        - 
        -                 if rand(rng)<p
        -                     rho_A=Δ2/(r2+Tau_A*Δ2)
        -                     detg_A*=abs2(1+Δ2/r2*Tau_A)
        -                     rho_B=Δ2/(r2+Tau_B*Δ2)
        -                     detg_B*=abs2(1+Δ2/r2*Tau_B)
        - 
        -                     mul!(tmpA1, gmInv_A,a_A )
        -                     mul!(tmpAA, tmpA1, b_A)
        -                     axpy!(-rho_A, tmpAA, gmInv_A)
        -                     mul!(tmpB1, gmInv_B,a_B )
        -                     mul!(tmpBB, tmpB1, b_B)
        -                     axpy!(-rho_B, tmpBB, gmInv_B)
        -                     # gmInv_A-=rho_A* ( gmInv_A*a_A .* b_A)
        -                     # gmInv_B-=rho_B* ( gmInv_B*a_B .* b_B)
        - 
        -                     mul!(tmpNN, view(G0t2,:,x),view(Gt02,x:x,:))
        -                     axpy!(Δ2/r2, tmpNN, G02)
        -                     mul!(tmpNN, view(Gt2,:,x),view(Gt02,x:x,:))
        -                     axpy!(Δ2/r2, tmpNN, Gt02)
        -                     tmp1N[1, :] .= -view(Gt1,x, :)
        -                     tmp1N[1, x] += 1
        -                     mul!(tmpNN, view(G0t2,:,x),tmp1N)
        0                     axpy!(-Δ2/r2, tmpNN, G0t2)
        0                     mul!(tmpNN, view(Gt2,:,x),tmp1N)
        -                     axpy!(-Δ2/r2, tmpNN, Gt2)
        0                     ss[2][x,lt]=sx2
        0                     # G02+=Δ2/r2* (G0t2[:,x] .* transpose( Gt02[x,:]))
        0                     # Gt02+=Δ2/r2* (Gt2[:,x] .* transpose( Gt02[x,:]))
        0                     # G0t2-=Δ2/r2* (G0t2[:,x] .* transpose( (II-Gt2)[x,:]))
  2799360                     # Gt2-=Δ2/r2* (Gt2[:,x] .* transpose( (II-Gt2)[x,:])   )      
        -                     # #####################################################################
        -                     # print('*')
        0                     # Gt2_,G02_,Gt02_,G0t2_=G4_old(model,ss[2],lt,div(model.Nt,2))
        0                     # GM_A_=GroverMatrix(G01[indexA,indexA],G02_[indexA,indexA])
        -                     # gmInv_A_=inv(GM_A_)
        0                     # GM_B_=GroverMatrix(G01[indexB,indexB],G02_[indexB,indexB])
        0                     # gmInv_B_=inv(GM_B_)
        0                     # detg_A_=abs2(det(GM_A_))
        0                     # detg_B_=abs2(det(GM_B_))
  2799360 
        -                     # if norm(Gt2-Gt2_)+norm(G02-G02_)+norm(Gt02-Gt02_)+norm(G0t2-G0t2_)+
        -                     #    norm(gmInv_A_-gmInv_A)+norm(gmInv_B-gmInv_B_)+abs(detg_A-detg_A_)+abs(detg_B-detg_B_)>1e-3
        -                     #     println('\n',norm(Gt2-Gt2_),'\n',norm(G02-G02_),'\n',norm(Gt02-Gt02_),'\n',norm(G0t2-G0t2_))
        -                     #     error("$lt  $x:,,,asdasdasd")
        -                     # end
        -                     #####################################################################
        -                 end
        0 
        -             end
  4198912 
  2799232             ##------------------------------------------------------------------------
 10264080             tmpO+=(detg_A/detg_B)^(1/Nλ)
        -             counter+=1
   466544             ##------------------------------------------------------------------------
  2648032         end
  3310048 
  2647968         O[loop+1]=tmpO/counter
  3309952         tmpO=counter=0
        -     end
        0     return ss
        0 end
